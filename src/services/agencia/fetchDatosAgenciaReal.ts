
import { AgenciaBackData } from "../../interfaces/AgenciaBackData";
import { agenciaMock } from "../../mocks/agenciaMock";

// üîπ Cambi√° a false para usar el backend real
const USAR_MOCK = false;

// üè∑Ô∏è Dominio base de producci√≥n
const BASE_DOMAIN = "travelconnect.com.ar";

/**
 * Resuelve la BASE del host de la API:
 * - En local: usa VITE_API_BASE_OVERRIDE si est√°, sino {VITE_DEV_SUBDOMAIN}.{BASE_DOMAIN} o el apex.
 * - En prod:
 *    ‚Ä¢ si est√°s en subdominio de travelconnect.com.ar ‚Üí usa ese mismo subdominio
 *    ‚Ä¢ si est√°s en el apex (o www) ‚Üí usa el apex
 * - Si todo falla ‚Üí usa protocol + hostname actual.
 *
 * Env opcionales:
 * - VITE_API_BASE_OVERRIDE: forzar base completa (e.g. "https://miapi.dev:8443")
 * - VITE_DEV_SUBDOMAIN: subdominio a usar en local (e.g. "ezezeze")
 */
function getApiBase(): string {
  if (typeof window === "undefined") {
    // Si alguna vez corr√©s esto en SSR, devolv√© una base segura o vac√≠a.
    return "";
  }

  const { protocol, hostname } = window.location;

  // 1) Forzar base por .env si quer√©s desambiguar (staging, t√∫neles, etc.)
  const forced = import.meta.env.VITE_API_BASE_OVERRIDE?.toString().trim();
  if (forced) {
    return forced.replace(/\/+$/, ""); // sin barra final
  }

  // 2) Entorno local ‚Üí us√° subdominio de pruebas o el apex
  const isLocal =
    hostname === "localhost" || hostname === "127.0.0.1" || hostname === "[::1]";

  if (isLocal) {
    const devSub = import.meta.env.VITE_DEV_SUBDOMAIN?.toString().trim();
    const targetHost = devSub ? `${devSub}.${BASE_DOMAIN}` : BASE_DOMAIN;
    return `${protocol}//${targetHost}`;
  }

  // 3) Producci√≥n sobre el dominio real
  //    - Si est√°s en foo.travelconnect.com.ar ‚Üí quedate en foo.travelconnect.com.ar
  //    - Si est√°s en travelconnect.com.ar o www.travelconnect.com.ar ‚Üí us√° el apex
  if (hostname === BASE_DOMAIN || hostname === `www.${BASE_DOMAIN}`) {
    return `${protocol}//${BASE_DOMAIN}`;
  }
  if (hostname.endsWith(`.${BASE_DOMAIN}`)) {
    return `${protocol}//${hostname}`;
  }

  // 4) Fallback gen√©rico: mismo host actual
  return `${protocol}//${hostname}`;
}

// ‚úÖ Devuelve SIEMPRE el formato crudo del backend (AgenciaBackData)
export const fetchDatosAgenciaReal = async (): Promise<AgenciaBackData> => {
  if (USAR_MOCK) {
    console.log("‚ö†Ô∏è Usando datos simulados (mock) para agencia");
    const data: AgenciaBackData = agenciaMock[0];
    console.log("[AGENCIA][RAW MOCK]", data);
    return data; // <- sin transformar
  }

  const base = getApiBase();
  const url = `${base}/agencia2`;

  console.log("[AGENCIA] Fetch URL:", url);

  const response = await fetch(url, {
    headers: { Accept: "application/json" },
    // credentials: 'include', // üëâ descoment√° si necesit√°s cookies
  });

  if (!response.ok) {
    throw new Error("No se pudo obtener la informaci√≥n de la agencia");
  }

  const data: AgenciaBackData = await response.json();
  console.log(`‚úÖ Dato recibido de la API ${url}:`, data);
  return data; // <- sin transformar
};












